# First stage to copy GLIBC
FROM buglord/centos7-base:latest

# Install X server, XFCE desktop, and essential packages (without Chrome)
RUN yum install -y epel-release && \
    yum groupinstall -y "X Window System" "Xfce" && \
    yum install -y \
    xrdp \
    xrdp-selinux \
    supervisor \
    which \
    xorg-x11-xauth \
    xorg-x11-utils \
    mesa-libGL \
    mesa-dri-drivers \
    mesa-libgbm \
    libX11 \
    libXcomposite \
    libXcursor \
    libXdamage \
    libXext \
    libXi \
    libXtst \
    libXrandr \
    libXScrnSaver \
    libxkbfile \
    libXinerama \
    fuse \
    fuse-libs \
    xdg-utils \
    wget \
    dbus \
    dbus-x11 \
    gnome-keyring \
    libsecret \
    redhat-lsb-core \
    liberation-fonts \
    && yum clean all

COPY google-chrome.repo /etc/yum.repos.d/

# Install Chrome with custom library path, ignoring dependencies
RUN yum install -y --skip-broken google-chrome-stable
# echo 'export LD_LIBRARY_PATH=/opt/glibc-2.28/lib:$LD_LIBRARY_PATH' >> /etc/profile.d/chrome-libs.sh

# Create Chrome wrapper script
RUN echo '#!/bin/bash' > /usr/local/bin/chrome-wrapper.sh && \
    echo 'LD_LIBRARY_PATH=/opt/glibc-2.28/lib:$LD_LIBRARY_PATH exec /usr/bin/google-chrome "$@"' >> /usr/local/bin/chrome-wrapper.sh && \
    chmod +x /usr/local/bin/chrome-wrapper.sh

# Configure XRDP
RUN cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak && \
    sed -i 's/max_bpp=32/max_bpp=24/g' /etc/xrdp/xrdp.ini && \
    sed -i 's/security_layer=negotiate/security_layer=rdp/g' /etc/xrdp/xrdp.ini && \
    systemctl enable xrdp

# Create coder user
RUN useradd -m -s /bin/bash coder && \
    echo "coder ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    echo "coder:coder" | chpasswd && \
    usermod -aG wheel coder

# Configure XFCE session
RUN mkdir -p /home/coder/.cache/sessions && \
    mkdir -p /home/coder/.config/xfce4/xfconf/xfce-perchannel-xml && \
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \
    <channel name=\"xfwm4\" version=\"1.0\"> \
      <property name=\"use_compositing\" type=\"bool\" value=\"false\"/> \
    </channel>" > /home/coder/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml && \
    chown -R coder:coder /home/coder/.cache /home/coder/.config

# Set correct permissions and create necessary directories
RUN mkdir -p /home/coder/.local/share && \
    chown -R coder:coder /home/coder/.local && \
    mkdir -p /dev/dri && \
    chmod 777 /dev/dri

# Configure X server for software rendering
RUN echo '#!/bin/bash' > /home/coder/.Xclients && \
    echo 'export LIBGL_ALWAYS_SOFTWARE=1' >> /home/coder/.Xclients && \
    echo 'export LIBGL_ALWAYS_INDIRECT=1' >> /home/coder/.Xclients && \
    echo 'startxfce4' >> /home/coder/.Xclients && \
    chmod +x /home/coder/.Xclients && \
    chown coder:coder /home/coder/.Xclients

# Set up D-Bus and required directories
RUN mkdir -p /run/dbus && \
    mkdir -p /var/run/dbus && \
    dbus-uuidgen > /var/lib/dbus/machine-id && \
    chown -R coder:coder /run/dbus

# Configure supervisord with logging
RUN echo "[supervisord]" > /etc/supervisord.conf && \
    echo "nodaemon=true" >> /etc/supervisord.conf && \
    echo "loglevel=debug" >> /etc/supervisord.conf && \
    echo "" >> /etc/supervisord.conf && \
    echo "[program:dbus]" >> /etc/supervisord.conf && \
    echo "command=/usr/bin/dbus-daemon --system --nofork" >> /etc/supervisord.conf && \
    echo "autorestart=true" >> /etc/supervisord.conf && \
    echo "stdout_logfile=/var/log/dbus.log" >> /etc/supervisord.conf && \
    echo "stderr_logfile=/var/log/dbus.err" >> /etc/supervisord.conf && \
    echo "" >> /etc/supervisord.conf && \
    echo "[program:xrdp-sesman]" >> /etc/supervisord.conf && \
    echo "command=/usr/sbin/xrdp-sesman --nodaemon" >> /etc/supervisord.conf && \
    echo "autorestart=true" >> /etc/supervisord.conf && \
    echo "stdout_logfile=/var/log/xrdp-sesman.log" >> /etc/supervisord.conf && \
    echo "stderr_logfile=/var/log/xrdp-sesman.err" >> /etc/supervisord.conf && \
    echo "" >> /etc/supervisord.conf && \
    echo "[program:xrdp]" >> /etc/supervisord.conf && \
    echo "command=/usr/sbin/xrdp --nodaemon" >> /etc/supervisord.conf && \
    echo "autorestart=true" >> /etc/supervisord.conf && \
    echo "stdout_logfile=/var/log/xrdp.log" >> /etc/supervisord.conf && \
    echo "stderr_logfile=/var/log/xrdp.err" >> /etc/supervisord.conf

# Update supervisord config to ensure proper startup order
RUN sed -i 's/\[supervisord\]/[supervisord]\nuser=root/g' /etc/supervisord.conf

# Download and install Cursor
RUN wget -O /tmp/cursor.app https://downloader.cursor.sh/linux && \
    chmod +x /tmp/cursor.app && \
    /tmp/cursor.app --appimage-extract && \
    mv squashfs-root /usr/local/cursor && \
    chown -R coder:coder /usr/local/cursor && \
    rm /tmp/cursor.app

# Set environment variables
ENV LIBGL_ALWAYS_INDIRECT=1
ENV ELECTRON_DISABLE_SANDBOX=1
ENV ELECTRON_FORCE_WINDOW_MENU_BAR=1
ENV APPDIR=/usr/local/cursor

# Create cursor startup script with software rendering
RUN echo '#!/bin/bash' > /bin/cursor.sh && \
    echo 'export DISPLAY=${DISPLAY:-:0}' >> /bin/cursor.sh && \
    echo 'export LIBGL_ALWAYS_SOFTWARE=1' >> /bin/cursor.sh && \
    echo 'export LIBGL_ALWAYS_INDIRECT=1' >> /bin/cursor.sh && \
    echo 'export ELECTRON_FORCE_WINDOW_MENU_BAR=1' >> /bin/cursor.sh && \
    echo 'export LD_LIBRARY_PATH=/opt/glibc-2.28/lib:$LD_LIBRARY_PATH' >> /bin/cursor.sh && \
    echo 'export APPDIR=/usr/local/cursor' >> /bin/cursor.sh && \
    echo 'export ELECTRON_ENABLE_LOGGING=true' >> /bin/cursor.sh && \
    echo 'exec $APPDIR/AppRun --no-sandbox --disable-gpu --in-process-gpu --disable-gpu-compositing "$@" 2>/var/log/cursor.err 1>/var/log/cursor.log' >> /bin/cursor.sh && \
    chmod +x /bin/cursor.sh && \
    chown coder:coder /bin/cursor.sh

# Create desktop shortcut for Cursor
RUN mkdir -p /home/coder/Desktop && \
    echo "[Desktop Entry]" > /home/coder/Desktop/cursor.desktop && \
    echo "Name=Cursor" >> /home/coder/Desktop/cursor.desktop && \
    echo "Exec=bash -c 'eval \$(dbus-launch --sh-syntax); eval \$(gnome-keyring-daemon --start --components=secrets); /bin/cursor.sh'" >> /home/coder/Desktop/cursor.desktop && \
    echo "Icon=/usr/local/cursor/resources/app/resources/linux/code.png" >> /home/coder/Desktop/cursor.desktop && \
    echo "Type=Application" >> /home/coder/Desktop/cursor.desktop && \
    echo "Categories=Development;" >> /home/coder/Desktop/cursor.desktop && \
    chmod +x /home/coder/Desktop/cursor.desktop && \
    chown -R coder:coder /home/coder/Desktop

# Configure cursor:// protocol handler
RUN mkdir -p /usr/share/applications && \
    echo "[Desktop Entry]" > /usr/share/applications/cursor-protocol-handler.desktop && \
    echo "Name=Cursor Protocol Handler" >> /usr/share/applications/cursor-protocol-handler.desktop && \
    echo "Exec=/bin/cursor.sh --reuse-window --open-url %u" >> /usr/share/applications/cursor-protocol-handler.desktop && \
    echo "Type=Application" >> /usr/share/applications/cursor-protocol-handler.desktop && \
    echo "MimeType=x-scheme-handler/cursor;" >> /usr/share/applications/cursor-protocol-handler.desktop && \
    echo "NoDisplay=true" >> /usr/share/applications/cursor-protocol-handler.desktop && \
    chmod +x /usr/share/applications/cursor-protocol-handler.desktop && \
    xdg-mime default cursor-protocol-handler.desktop x-scheme-handler/cursor && \
    update-desktop-database /usr/share/applications

# Configure Chrome as default browser
RUN mkdir -p /home/coder/.config && \
    echo "[Default Applications]" > /home/coder/.config/mimeapps.list && \
    echo "x-scheme-handler/http=chrome-wrapper.desktop" >> /home/coder/.config/mimeapps.list && \
    echo "x-scheme-handler/https=chrome-wrapper.desktop" >> /home/coder/.config/mimeapps.list && \
    echo "text/html=chrome-wrapper.desktop" >> /home/coder/.config/mimeapps.list && \
    chown -R coder:coder /home/coder/.config

# Create Chrome wrapper desktop entry
RUN echo "[Desktop Entry]" > /usr/share/applications/chrome-wrapper.desktop && \
    echo "Version=1.0" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Name=Google Chrome" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Exec=/usr/local/bin/chrome-wrapper.sh %U" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Terminal=false" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Icon=google-chrome" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Type=Application" >> /usr/share/applications/chrome-wrapper.desktop && \
    echo "Categories=Network;WebBrowser;" >> /usr/share/applications/chrome-wrapper.desktop

# Add Chrome policy to disable sandbox (required for running in container)
RUN mkdir -p /etc/opt/chrome/policies/managed && \
    echo '{ "AllowInsecureLocalhost": true, "SandboxLinux": false }' > /etc/opt/chrome/policies/managed/policy.json
    
ENV LANG=en_US.UTF-8

# Expose XRDP port
EXPOSE 3389

# Start supervisord
ENTRYPOINT ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
