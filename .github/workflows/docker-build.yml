name: Docker Build and Push

on:
  schedule:
    - cron: '0 0 * * *'  # Run at 00:00 UTC every day
  workflow_dispatch:  # Allow manual triggers
    inputs:
      build_ubuntu:
        description: 'Build Ubuntu image'
        type: boolean
        default: false
      build_default:
        description: 'Build default image'
        type: boolean
        default: true
  push:
    branches: [ "main" ]  # Run on pushes to main branch
    paths:
      - 'Dockerfile*'     # Run when Dockerfiles change
      - 'build.sh'        # Run when build script changes
      - '.github/workflows/*.yml'  # Run when workflows change

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/cursord

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Docker Hub credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Error: DOCKERHUB_TOKEN secret is not set"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Cursor version
        id: version
        run: |
          # Fetch version info from cursor-ai-downloads
          VERSION_INFO=$(curl -s -L "https://raw.githubusercontent.com/oslook/cursor-ai-downloads/main/version-history.json")
          
          if [ -z "$VERSION_INFO" ]; then
            echo "Failed to fetch version info"
            exit 1
          fi
          
          # Install jq if needed
          sudo apt-get update && sudo apt-get install -y jq
          
          # Debug: Show the structure of the JSON
          echo "JSON structure:"
          echo "$VERSION_INFO" | jq 'keys'
          
          # Extract the latest version from the versions array
          LATEST_VERSION=$(echo "$VERSION_INFO" | jq -r '.versions[0].version')
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "Failed to extract version from version info"
            echo "Raw JSON content:"
            echo "$VERSION_INFO" | jq '.'
            exit 1
          fi
          
          # Get Linux x64 download URL from the platforms object
          LINUX_URL=$(echo "$VERSION_INFO" | jq -r '.versions[0].platforms."linux-x64"')
          
          if [ -z "$LINUX_URL" ] || [ "$LINUX_URL" = "null" ]; then
            echo "Failed to extract Linux download URL"
            echo "Raw JSON content:"
            echo "$VERSION_INFO" | jq '.'
            exit 1
          fi
          
          # Export variables
          echo "CURSOR_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
          echo "CURSOR_DOWNLOAD_URL=${LINUX_URL}" >> $GITHUB_ENV
          
          # Debug output
          echo "Latest version: ${LATEST_VERSION}"
          echo "Linux x64 download URL: ${LINUX_URL}"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Default image build
      - name: Check if default Docker image exists
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_default }}
        id: check_default_image
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - skipping version check"
            echo "EXISTS=false" >> $GITHUB_ENV
          elif docker manifest inspect ${{ env.IMAGE_NAME }}:v${CURSOR_VERSION} > /dev/null 2>&1; then
            echo "Image already exists, skipping build"
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Image does not exist, will build"
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx for default image
        if: env.EXISTS == 'false' && (github.event_name != 'workflow_dispatch' || inputs.build_default)
        uses: docker/setup-buildx-action@v3

      - name: Build and push default Docker image
        if: env.EXISTS == 'false' && (github.event_name != 'workflow_dispatch' || inputs.build_default)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            CURSOR_DOWNLOAD_URL=${{ env.CURSOR_DOWNLOAD_URL }}
          tags: |
            ${{ env.IMAGE_NAME }}:v${{ env.CURSOR_VERSION }}
            ${{ env.IMAGE_NAME }}:latest

      # Ubuntu image build
      - name: Check if Ubuntu Docker image exists
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_ubuntu }}
        id: check_ubuntu_image
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - skipping version check"
            echo "UBUNTU_EXISTS=false" >> $GITHUB_ENV
          elif docker manifest inspect ${{ env.IMAGE_NAME }}:ubuntu-v${CURSOR_VERSION} > /dev/null 2>&1; then
            echo "Ubuntu image already exists, skipping build"
            echo "UBUNTU_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Ubuntu image does not exist, will build"
            echo "UBUNTU_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx for Ubuntu image
        if: env.UBUNTU_EXISTS == 'false' && (github.event_name != 'workflow_dispatch' || inputs.build_ubuntu)
        uses: docker/setup-buildx-action@v3

      - name: Build and push Ubuntu Docker image
        if: env.UBUNTU_EXISTS == 'false' && (github.event_name != 'workflow_dispatch' || inputs.build_ubuntu)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.ubuntu
          push: true
          build-args: |
            CURSOR_DOWNLOAD_URL=${{ env.CURSOR_DOWNLOAD_URL }}
            BASE_IMAGE=${{ env.IMAGE_NAME }}
            BASE_TAG=v${{ env.CURSOR_VERSION }}
          tags: |
            ${{ env.IMAGE_NAME }}:ubuntu-v${{ env.CURSOR_VERSION }}
            ${{ env.IMAGE_NAME }}:ubuntu-latest

      - name: Log out from Docker Hub
        if: always()
        run: docker logout 