name: Docker Build and Push

on:
  schedule:
    - cron: '0 0 * * *'  # Run at 00:00 UTC every day
  workflow_dispatch:  # Allow manual triggers
  push:
    branches: [ "main" ]  # Run on pushes to main branch
    paths:
      - 'Dockerfile*'     # Run when Dockerfiles change
      - 'build.sh'        # Run when build script changes
      - '.github/workflows/*.yml'  # Run when workflows change

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/cursord

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Docker Hub credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Error: DOCKERHUB_TOKEN secret is not set"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Cursor version
        id: version
        run: |
          # Fetch the changelog page
          CHANGELOG=$(curl -s -L https://www.cursor.com/changelog)
          
          # Extract version using the same pattern as build.sh
          LATEST_VERSION=$(echo "$CHANGELOG" | grep -o 'uppercase">[0-9]\+\.[0-9]\+<' | head -n 1 | sed 's/uppercase">//;s/<$//' | tr -d '\n\r')
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to extract version from changelog"
            exit 1
          fi
          
          echo "CURSOR_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
          echo "Latest version: ${LATEST_VERSION}"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if Docker image exists
        id: check_image
        run: |
          if docker manifest inspect ${{ env.IMAGE_NAME }}:v${CURSOR_VERSION} > /dev/null 2>&1; then
            echo "Image already exists, skipping build"
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Image does not exist, will build"
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        if: env.EXISTS == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: env.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:v${{ env.CURSOR_VERSION }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Log out from Docker Hub
        if: always()
        run: docker logout 